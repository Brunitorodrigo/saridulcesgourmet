import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
import time as pytime
from pymongo import MongoClient
import certifi
from bson.objectid import ObjectId
import hashlib
import base64
from io import BytesIO

# =============================================
# CONFIGURA√á√ÉO DO MONGODB ATLAS
# =============================================

MONGO_URI = 'mongodb+srv://brunorodrigo:123Putao@cluster0.lrr3cgd.mongodb.net/saridulces?retryWrites=true&w=majority'

def get_database():
    try:
        client = MongoClient(
            MONGO_URI,
            tlsCAFile=certifi.where(),
            serverSelectionTimeoutMS=5000,
            connectTimeoutMS=30000,
            socketTimeoutMS=30000
        )
        
        client.admin.command('ping')
        db = client.get_database()
        
        required_collections = ['clientes', 'produtos', 'vendas', 'itens_venda', 'configuracoes', 'usuarios']
        for coll in required_collections:
            if coll not in db.list_collection_names():
                db.create_collection(coll)
                
                # Cria usu√°rio admin padr√£o se a cole√ß√£o for nova
                if coll == 'usuarios':
                    db.usuarios.insert_one({
                        "username": "admin",
                        "password_hash": hashlib.sha256("admin123".encode()).hexdigest(),
                        "nome": "Administrador",
                        "email": "admin@sistema.com",
                        "nivel_acesso": "admin",
                        "data_criacao": datetime.now(),
                        "ultimo_login": None,
                        "ativo": True
                    })
                
        return db
        
    except Exception as e:
        st.error(f"Falha na conex√£o com o MongoDB: {str(e)}")
        st.error("Verifique sua conex√£o com a internet e as credenciais.")
        st.stop()

# =============================================
# SISTEMA DE AUTENTICA√á√ÉO
# =============================================

def inicializar_autenticacao():
    if 'autenticado' not in st.session_state:
        st.session_state.autenticado = False
    if 'usuario_atual' not in st.session_state:
        st.session_state.usuario_atual = None
    if 'tentativas_login' not in st.session_state:
        st.session_state.tentativas_login = 0
    if 'pagina_atual' not in st.session_state:
        st.session_state.pagina_atual = "menu"

def verificar_credenciais(db, username, password):
    usuario = db.usuarios.find_one({"username": username, "ativo": True})
    if usuario:
        password_hash = hashlib.sha256(password.encode()).hexdigest()
        if usuario['password_hash'] == password_hash:
            return usuario
    return None

def pagina_login(db):
    st.title("üîê Login - Sari Dulces iGEST")
    
    with st.form("form_login"):
        username = st.text_input("Usu√°rio", placeholder="Digite seu nome de usu√°rio")
        password = st.text_input("Senha", placeholder="Digite sua senha", type="password")
        
        if st.form_submit_button("Entrar"):
            if st.session_state.tentativas_login >= 3:
                st.error("N√∫mero m√°ximo de tentativas excedido. Tente novamente mais tarde.")
                return
            
            usuario = verificar_credenciais(db, username, password)
            if usuario:
                st.session_state.autenticado = True
                st.session_state.usuario_atual = usuario
                st.session_state.tentativas_login = 0
                st.session_state.pagina_atual = "menu"
                
                # Atualiza √∫ltimo login no banco de dados
                db.usuarios.update_one(
                    {"_id": usuario["_id"]},
                    {"$set": {"ultimo_login": datetime.now()}}
                )
                
                st.success(f"Bem-vindo, {usuario['nome']}!")
                pytime.sleep(1)
                st.rerun()
            else:
                st.session_state.tentativas_login += 1
                st.error("Credenciais inv√°lidas. Tente novamente.")
    
    if st.session_state.tentativas_login > 0:
        st.warning(f"Tentativas restantes: {3 - st.session_state.tentativas_login}")

def verificar_autenticacao(db):
    if not st.session_state.autenticado:
        pagina_login(db)
        st.stop()

# =============================================
# FUN√á√ÉO DE ALTERA√á√ÉO DE SENHA
# =============================================

def alterar_senha(db):
    verificar_autenticacao(db)
    st.title("üîë Alterar Senha")
    
    with st.form("form_alterar_senha", clear_on_submit=True):
        senha_atual = st.text_input("Senha Atual", type="password")
        nova_senha = st.text_input("Nova Senha", type="password", 
                                 help="A senha deve ter pelo menos 6 caracteres")
        confirmar_senha = st.text_input("Confirmar Nova Senha", type="password")
        
        if st.form_submit_button("Salvar Altera√ß√µes", type="primary"):
            # Verifica se a senha atual est√° correta
            senha_atual_hash = hashlib.sha256(senha_atual.encode()).hexdigest()
            if senha_atual_hash != st.session_state.usuario_atual["password_hash"]:
                st.error("Senha atual incorreta!")
                return
            
            # Valida a nova senha
            if nova_senha != confirmar_senha:
                st.error("As senhas n√£o coincidem!")
                return
            
            if len(nova_senha) < 6:
                st.error("A senha deve ter pelo menos 6 caracteres!")
                return
            
            # Atualiza a senha no banco de dados
            nova_senha_hash = hashlib.sha256(nova_senha.encode()).hexdigest()
            db.usuarios.update_one(
                {"_id": st.session_state.usuario_atual["_id"]},
                {"$set": {"password_hash": nova_senha_hash}}
            )
            
            # Atualiza a sess√£o
            st.session_state.usuario_atual["password_hash"] = nova_senha_hash
            
            st.success("Senha alterada com sucesso!")
            st.balloons()
            pytime.sleep(2)
            st.session_state.pagina_atual = "menu"
            st.rerun()
    
    if st.button("Voltar ao Menu"):
        st.session_state.pagina_atual = "menu"
        st.rerun()

# =============================================
# M√ìDULO DE USU√ÅRIOS
# =============================================

def modulo_usuarios(db):
    verificar_autenticacao(db)
    
    # Verificar se o usu√°rio atual tem permiss√£o para acessar este m√≥dulo
    if st.session_state.usuario_atual['nivel_acesso'] not in ['admin', 'gerente']:
        st.error("Voc√™ n√£o tem permiss√£o para acessar esta funcionalidade.")
        return
    
    st.title("üë®‚Äçüíº Gest√£o de Usu√°rios")
    
    tab1, tab2 = st.tabs(["üìã Lista de Usu√°rios", "‚ûï Cadastrar Usu√°rio"])
    
    with tab1:
        st.subheader("Usu√°rios Cadastrados")
        
        usuarios = list(db.usuarios.find().sort("nome", 1))
        
        if not usuarios:
            st.info("Nenhum usu√°rio cadastrado.")
        else:
            dados = []
            for usuario in usuarios:
                dados.append({
                    "ID": str(usuario["_id"]),
                    "Nome": usuario["nome"],
                    "Usu√°rio": usuario["username"],
                    "E-mail": usuario.get("email", "-"),
                    "N√≠vel": usuario["nivel_acesso"].capitalize(),
                    "√öltimo Login": format_date(usuario.get("ultimo_login")),
                    "Status": "Ativo" if usuario.get("ativo", False) else "Inativo",
                    "A√ß√µes": "Manter"
                })

            df = pd.DataFrame(dados)
            
            edited_df = st.data_editor(
                df,
                column_config={
                    "ID": st.column_config.Column(disabled=True),
                    "A√ß√µes": st.column_config.SelectboxColumn(
                        "A√ß√µes",
                        options=["Manter", "Editar", "Inativar"],
                        required=True
                    )
                },
                hide_index=True,
                use_container_width=True,
                key="editor_usuarios"
            )
            
            if not edited_df[edited_df['A√ß√µes'] == "Inativar"].empty:
                st.warning("‚ö†Ô∏è Aten√ß√£o: Esta a√ß√£o desativar√° o acesso do usu√°rio!")
                if st.button("Confirmar Inativa√ß√£o", type="primary"):
                    for idx, row in edited_df[edited_df['A√ß√µes'] == "Inativar"].iterrows():
                        db.usuarios.update_one(
                            {"_id": ObjectId(row['ID'])},
                            {"$set": {"ativo": False}}
                        )
                    st.success("Usu√°rios inativados com sucesso!")
                    st.rerun()
    
    with tab2:
        st.subheader("Cadastrar Novo Usu√°rio")
        with st.form("form_usuario", clear_on_submit=True, border=True):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome Completo*", placeholder="Nome completo do usu√°rio")
                username = st.text_input("Nome de Usu√°rio*", placeholder="Nome para login")
                
            with col2:
                email = st.text_input("E-mail", placeholder="usuario@empresa.com")
                nivel_acesso = st.selectbox(
                    "N√≠vel de Acesso*",
                    ["admin", "gerente", "operador"],
                    index=2
                )
            
            password = st.text_input("Senha*", placeholder="Digite uma senha forte", type="password")
            confirm_password = st.text_input("Confirmar Senha*", placeholder="Repita a senha", type="password")
            
            if st.form_submit_button("Cadastrar Usu√°rio", type="primary"):
                if not nome or not username or not password or not confirm_password:
                    st.error("Campos obrigat√≥rios (*) n√£o preenchidos!")
                elif password != confirm_password:
                    st.error("As senhas n√£o coincidem!")
                else:
                    # Verifica se o username j√° existe
                    if db.usuarios.count_documents({"username": username}, limit=1) > 0:
                        st.error("Nome de usu√°rio j√° est√° em uso!")
                    else:
                        try:
                            novo_usuario = {
                                "nome": nome,
                                "username": username,
                                "email": email if email else None,
                                "password_hash": hashlib.sha256(password.encode()).hexdigest(),
                                "nivel_acesso": nivel_acesso,
                                "data_criacao": datetime.now(),
                                "ultimo_login": None,
                                "ativo": True
                            }

                            db.usuarios.insert_one(novo_usuario)
                            st.success("Usu√°rio cadastrado com sucesso!")
                            st.balloons()
                            pytime.sleep(1.5)
                            st.rerun()
                        except Exception as e:
                            st.error(f"Erro ao cadastrar usu√°rio: {str(e)}")

# =============================================
# FUN√á√ïES AUXILIARES
# =============================================

def format_date(dt):
    return dt.strftime("%d/%m/%Y %H:%M") if dt else "N√£o informado"

def format_currency(value):
    return f"R$ {value:,.2f}"

def date_to_datetime(date_obj):
    return datetime.combine(date_obj, datetime.min.time())

def generate_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, index=False, sheet_name='Relatorio')
    writer.close()
    processed_data = output.getvalue()
    return processed_data

# =============================================
# M√ìDULO DE CLIENTES
# =============================================

def modulo_clientes(db):
    verificar_autenticacao(db)
    st.title("üë• Gest√£o de Clientes")
    clientes_col = db['clientes']

    tab1, tab2 = st.tabs(["üìù Cadastrar Cliente", "üìã Lista de Clientes"])

    with tab1:
        st.subheader("Cadastro de Novo Cliente")
        with st.form("form_cliente", clear_on_submit=True, border=True):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome Completo*", placeholder="Nome completo do cliente")
                data_nascimento = st.date_input(
                    "Data de Nascimento",
                    min_value=date(1900, 1, 1),
                    max_value=datetime.now().date(),
                    format="DD/MM/YYYY"
                )
                cpf = st.text_input("CPF", placeholder="000.000.000-00", max_chars=14)
                
            with col2:
                celular = st.text_input("Celular*", placeholder="(00) 00000-0000", max_chars=15)
                email = st.text_input("E-mail", placeholder="cliente@exemplo.com")
                tipo_cliente = st.selectbox(
                    "Tipo de Cliente",
                    ["Consumidor Final", "Revendedor", "Empresa"],
                    index=0
                )
            
            endereco = st.text_area("Endere√ßo Completo")
            observacoes = st.text_area("Observa√ß√µes/Notas")
            
            if st.form_submit_button("Salvar Cliente", type="primary"):
                if not nome or not celular:
                    st.error("Campos obrigat√≥rios (*) n√£o preenchidos!")
                else:
                    try:
                        novo_cliente = {
                            "nome": nome,
                            "data_nascimento": date_to_datetime(data_nascimento),
                            "cpf": cpf if cpf else None,
                            "contato": {
                                "celular": celular,
                                "email": email if email else None
                            },
                            "endereco": endereco if endereco else None,
                            "observacoes": observacoes if observacoes else None,
                            "data_cadastro": datetime.now(),
                            "ultima_atualizacao": datetime.now(),
                            "status": "ativo",
                            "tipo": tipo_cliente.lower().replace(" ", "_"),
                            "compras_realizadas": 0,
                            "total_gasto": 0.0
                        }

                        clientes_col.insert_one(novo_cliente)
                        st.success("Cliente cadastrado com sucesso!")
                        st.balloons()
                        pytime.sleep(1.5)
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao cadastrar cliente: {str(e)}")

    with tab2:
        st.subheader("Clientes Cadastrados")
        
        with st.expander("üîç Filtros", expanded=True):
            col_f1, col_f2 = st.columns(2)
            with col_f1:
                filtro_nome = st.text_input("Buscar por nome")
            with col_f2:
                filtro_status = st.selectbox(
                    "Status",
                    ["Ativos", "Inativos", "Todos"],
                    index=0
                )
        
        query = {}
        if filtro_nome:
            query["nome"] = {"$regex": filtro_nome, "$options": "i"}
        if filtro_status != "Todos":
            query["status"] = "ativo" if filtro_status == "Ativos" else "inativo"
            
        clientes = list(clientes_col.find(query).sort("nome", 1))
        
        if not clientes:
            st.info("Nenhum cliente encontrado com os crit√©rios selecionados.")
            if st.button("Cadastrar Novo Cliente", type="primary"):
                st.session_state.redirect_to_tab1 = True
                st.rerun()
        else:
            dados = []
            for cliente in clientes:
                dados.append({
                    "ID": str(cliente["_id"]),
                    "Nome": cliente["nome"],
                    "Celular": cliente["contato"]["celular"],
                    "E-mail": cliente["contato"].get("email", "-"),
                    "Tipo": cliente["tipo"].replace("_", " ").title(),
                    "Status": "Ativo" if cliente["status"] == "ativo" else "Inativo",
                    "Compras": cliente.get("compras_realizadas", 0),
                    "Total Gasto": cliente.get("total_gasto", 0),
                    "A√ß√µes": "Manter"
                })

            df = pd.DataFrame(dados)
            
            edited_df = st.data_editor(
                df,
                column_config={
                    "ID": st.column_config.Column(disabled=True),
                    "Total Gasto": st.column_config.NumberColumn(format="R$ %.2f"),
                    "A√ß√µes": st.column_config.SelectboxColumn(
                        "A√ß√µes",
                        options=["Manter", "Editar", "Inativar"],
                        required=True
                    )
                },
                hide_index=True,
                use_container_width=True,
                key="editor_clientes"
            )
            
            if not edited_df[edited_df['A√ß√µes'] == "Inativar"].empty:
                st.warning("‚ö†Ô∏è Aten√ß√£o: Esta a√ß√£o marcar√° o cliente como inativo!")
                if st.button("Confirmar Inativa√ß√£o", type="primary"):
                    for idx, row in edited_df[edited_df['A√ß√µes'] == "Inativar"].iterrows():
                        clientes_col.update_one(
                            {"_id": ObjectId(row['ID'])},
                            {"$set": {"status": "inativo"}}
                        )
                    st.success("Clientes inativados com sucesso!")
                    st.rerun()

# =============================================
# M√ìDULO DE PRODUTOS
# =============================================

def modulo_produtos(db):
    verificar_autenticacao(db)
    st.title("üì¶ Gest√£o de Produtos")
    produtos_col = db['produtos']

    tab1, tab2, tab3 = st.tabs(["üìã Lista de Produtos", "‚ûï Cadastrar Produto", "üìä Estoque"])

    with tab1:
        st.subheader("Produtos Cadastrados")
        
        with st.expander("üîç Filtros", expanded=True):
            col_f1, col_f2, col_f3 = st.columns(3)
            with col_f1:
                filtro_nome = st.text_input("Buscar por nome")
            with col_f2:
                filtro_categoria = st.selectbox(
                    "Categoria",
                    ["Todas"] + list(produtos_col.distinct("categoria")),
                    index=0
                )
            with col_f3:
                filtro_estoque = st.selectbox(
                    "Estoque",
                    ["Todos", "Dispon√≠vel", "Estoque Baixo", "Esgotado"],
                    index=0
                )
        
        query = {}
        if filtro_nome:
            query["nome"] = {"$regex": filtro_nome, "$options": "i"}
        if filtro_categoria != "Todas":
            query["categoria"] = filtro_categoria
        if filtro_estoque == "Dispon√≠vel":
            query["estoque"] = {"$gt": 0}
        elif filtro_estoque == "Estoque Baixo":
            query["estoque"] = {"$gt": 0, "$lt": 10}
        elif filtro_estoque == "Esgotado":
            query["estoque"] = 0
            
        produtos = list(produtos_col.find(query).sort("nome", 1))
        
        if not produtos:
            st.info("Nenhum produto encontrado com os filtros selecionados.")
        else:
            dados = []
            for produto in produtos:
                dados.append({
                    "ID": str(produto["_id"]),
                    "Nome": produto["nome"],
                    "C√≥digo": produto.get("codigo", "-"),
                    "Categoria": produto["categoria"],
                    "Pre√ßo": produto["preco_venda"],
                    "Estoque": produto["estoque"],
                    "Status": "Ativo" if produto.get("ativo", False) else "Inativo",
                    "A√ß√µes": "Manter"
                })

            df = pd.DataFrame(dados)
            
            edited_df = st.data_editor(
                df,
                column_config={
                    "ID": st.column_config.Column(disabled=True),
                    "Pre√ßo": st.column_config.NumberColumn(format="R$ %.2f"),
                    "Estoque": st.column_config.ProgressColumn(
                        "Estoque",
                        format="%d",
                        min_value=0,
                        max_value=100
                    ),
                    "A√ß√µes": st.column_config.SelectboxColumn(
                        "A√ß√µes",
                        options=["Manter", "Editar", "Inativar", "Excluir"],
                        required=True
                    )
                },
                hide_index=True,
                use_container_width=True,
                key="editor_produtos"
            )
            
            # Processar a√ß√µes selecionadas
            if not edited_df[edited_df['A√ß√µes'] != "Manter"].empty:
                st.warning("‚ö†Ô∏è Aten√ß√£o: A√ß√µes em massa ser√£o aplicadas!")
                
                col1, col2 = st.columns(2)
                
                # A√ß√£o de inativar
                if not edited_df[edited_df['A√ß√µes'] == "Inativar"].empty:
                    with col1:
                        if st.button("Confirmar Inativa√ß√£o", key="btn_inativar_produtos"):
                            for idx, row in edited_df[edited_df['A√ß√µes'] == "Inativar"].iterrows():
                                produtos_col.update_one(
                                    {"_id": ObjectId(row['ID'])},
                                    {"$set": {"ativo": False}}
                                )
                            st.success("Produtos inativados com sucesso!")
                            st.rerun()
                
                # A√ß√£o de excluir
                if not edited_df[edited_df['A√ß√µes'] == "Excluir"].empty:
                    with col2:
                        if st.button("Confirmar Exclus√£o", type="primary", key="btn_excluir_produtos"):
                            # Verificar se h√° vendas associadas aos produtos
                            produtos_para_excluir = edited_df[edited_df['A√ß√µes'] == "Excluir"]
                            tem_vendas = False
                            
                            for idx, row in produtos_para_excluir.iterrows():
                                produto_id = row['ID']
                                # Verificar se existem itens de venda associados
                                if db['itens_venda'].count_documents({"produto_id": produto_id}) > 0:
                                    tem_vendas = True
                                    break
                            
                            if tem_vendas:
                                st.error("Alguns produtos possuem vendas associadas e n√£o podem ser exclu√≠dos!")
                            else:
                                for idx, row in produtos_para_excluir.iterrows():
                                    produtos_col.delete_one({"_id": ObjectId(row['ID'])})
                                st.success("Produtos exclu√≠dos com sucesso!")
                                st.rerun()

    with tab2:
        st.subheader("Cadastro de Produto")
        with st.form("form_produto", clear_on_submit=True, border=True):
            col1, col2 = st.columns(2)
            
            with col1:
                nome = st.text_input("Nome do Produto*", max_chars=100)
                codigo = st.text_input("C√≥digo SKU", help="C√≥digo √∫nico de identifica√ß√£o")
                categoria = st.selectbox(
                    "Categoria*",
                    ["Doce", "Salgado", "Bebida", "Outros"],
                    index=0
                )
                
            with col2:
                preco_venda = st.number_input("Pre√ßo de Venda (R$)*", min_value=0.01, step=0.01, format="%.2f")
                custo_producao = st.number_input("Custo de Produ√ß√£o (R$)", min_value=0.0, step=0.01, format="%.2f", value=0.0)
                estoque_inicial = st.number_input("Estoque Inicial*", min_value=0, step=1, value=0)

            descricao = st.text_area("Descri√ß√£o do Produto", height=100)
            ingredientes = st.text_area("Ingredientes/Composi√ß√£o")
            
            if st.form_submit_button("Cadastrar Produto", type="primary"):
                if not nome or not categoria or preco_venda <= 0:
                    st.error("Campos obrigat√≥rios (*) n√£o preenchidos corretamente!")
                else:
                    try:
                        novo_produto = {
                            "nome": nome,
                            "codigo": codigo if codigo else None,
                            "categoria": categoria,
                            "descricao": descricao,
                            "ingredientes": ingredientes,
                            "preco_venda": float(preco_venda),
                            "custo_producao": float(custo_producao),
                            "estoque": int(estoque_inicial),
                            "data_cadastro": datetime.now(),
                            "ultima_atualizacao": datetime.now(),
                            "ativo": True,
                            "destaque": False
                        }
                        
                        produtos_col.insert_one(novo_produto)
                        st.success("Produto cadastrado com sucesso!")
                        st.balloons()
                        pytime.sleep(1.5)
                        st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao cadastrar produto: {str(e)}")

    with tab3:
        st.subheader("Gerenciamento de Estoque")
        
        produtos_estoque = list(produtos_col.find({"ativo": True}).sort("nome", 1))
        
        if not produtos_estoque:
            st.info("Nenhum produto ativo dispon√≠vel para gerenciamento de estoque.")
        else:
            produto_selecionado = st.selectbox(
                "Selecione o produto",
                [p["_id"] for p in produtos_estoque],
                format_func=lambda x: next(f"{p['nome']} (Estoque: {p['estoque']})" for p in produtos_estoque if p["_id"] == x)
            )
            
            if produto_selecionado:
                produto = produtos_col.find_one({"_id": produto_selecionado})
                st.write(f"**Produto selecionado:** {produto['nome']}")
                st.write(f"**Estoque atual:** {produto['estoque']} unidades")
                
                col_m1, col_m2 = st.columns(2)
                
                with col_m1:
                    with st.form("form_entrada_estoque"):
                        entrada = st.number_input(
                            "Quantidade de entrada", 
                            min_value=1, 
                            step=1, 
                            value=1
                        )
                        motivo_entrada = st.text_input("Motivo da entrada (opcional)")
                        
                        if st.form_submit_button("Registrar Entrada"):
                            novo_estoque = produto["estoque"] + entrada
                            produtos_col.update_one(
                                {"_id": produto_selecionado},
                                {
                                    "$set": {"estoque": novo_estoque},
                                    "$push": {
                                        "movimentacoes": {
                                            "tipo": "entrada",
                                            "quantidade": entrada,
                                            "data": datetime.now(),
                                            "motivo": motivo_entrada if motivo_entrada else None,
                                            "responsavel": "Sistema"
                                        }
                                    }
                                }
                            )
                            st.success(f"Entrada de {entrada} unidades registrada. Novo estoque: {novo_estoque}")
                            st.rerun()
                
                with col_m2:
                    with st.form("form_saida_estoque"):
                        saida = st.number_input(
                            "Quantidade de sa√≠da", 
                            min_value=1, 
                            step=1, 
                            max_value=produto["estoque"],
                            value=1
                        )
                        motivo_saida = st.text_input("Motivo da sa√≠da (opcional)")
                        
                        if st.form_submit_button("Registrar Sa√≠da"):
                            novo_estoque = produto["estoque"] - saida
                            produtos_col.update_one(
                                {"_id": produto_selecionado},
                                {
                                    "$set": {"estoque": novo_estoque},
                                    "$push": {
                                        "movimentacoes": {
                                            "tipo": "sa√≠da",
                                            "quantidade": saida,
                                            "data": datetime.now(),
                                            "motivo": motivo_saida if motivo_saida else None,
                                            "responsavel": "Sistema"
                                        }
                                    }
                                }
                            )
                            st.success(f"Sa√≠da de {saida} unidades registrada. Novo estoque: {novo_estoque}")
                            st.rerun()
                
                if "movimentacoes" in produto and produto["movimentacoes"]:
                    st.subheader("Hist√≥rico de Movimenta√ß√µes")
                    historico = sorted(
                        produto["movimentacoes"], 
                        key=lambda x: x["data"], 
                        reverse=True
                    )[:20]
                    
                    for mov in historico:
                        cor = "green" if mov["tipo"] == "entrada" else "red"
                        st.markdown(
                            f"""
                            <div style="border-left: 4px solid {cor}; padding-left: 10px; margin: 5px 0;">
                                <b>{mov['tipo'].upper()}</b> - {mov['quantidade']} unidades<br>
                                <small>{mov['data'].strftime('%d/%m/%Y %H:%M')} | {mov.get('motivo', 'Sem motivo informado')}</small>
                            </div>
                            """,
                            unsafe_allow_html=True
                        )

# =============================================
# M√ìDULO DE VENDAS
# =============================================

def modulo_vendas(db):
    verificar_autenticacao(db)
    st.title("üí∞ Gest√£o de Vendas")
    
    vendas_col = db['vendas']
    itens_col = db['itens_venda']
    clientes_col = db['clientes']
    produtos_col = db['produtos']

    tab1, tab2, tab3 = st.tabs(["üõí Nova Venda", "üìú Hist√≥rico", "üìä Relat√≥rios"])

    with tab1:
        st.subheader("Registrar Nova Venda")
        
        # Se√ß√£o 1: Sele√ß√£o do Cliente
        clientes_ativos = list(clientes_col.find({"status": "ativo"}).sort("nome", 1))
        
        if not clientes_ativos:
            st.warning("Nenhum cliente cadastrado. Cadastre clientes antes de registrar vendas!")
            if st.button("Ir para Cadastro de Clientes ‚û°Ô∏è"):
                st.session_state.menu = "Clientes"
                st.rerun()
            st.stop()
            
        col_c1, col_c2 = st.columns([4,1])
        with col_c1:
            cliente_id = st.selectbox(
                "Cliente*",
                options=[str(c["_id"]) for c in clientes_ativos],
                format_func=lambda x: next(c["nome"] for c in clientes_ativos if str(c["_id"]) == x),
                key="select_cliente_nova_venda"
            )
        with col_c2:
            if st.button("‚ûï Novo Cliente", use_container_width=True):
                st.session_state.menu = "Clientes"
                st.rerun()

        # Se√ß√£o 2: Sele√ß√£o de Produtos
        produtos_disponiveis = list(produtos_col.find({
            "ativo": True,
            "estoque": {"$gt": 0}
        }).sort("nome", 1))
        
        if not produtos_disponiveis:
            st.warning("Nenhum produto dispon√≠vel em estoque!")
            if st.button("Ir para Gest√£o de Produtos ‚û°Ô∏è"):
                st.session_state.menu = "Produtos"
                st.rerun()
            st.stop()

        # Inicializa os itens da venda na sess√£o
        if 'itens_venda' not in st.session_state:
            st.session_state.itens_venda = []
            
        # Interface para adicionar itens
        with st.container(border=True):
            col_p1, col_p2, col_p3 = st.columns([4, 2, 2])
            with col_p1:
                produto_id = st.selectbox(
                    "Selecione o produto",
                    options=[str(p["_id"]) for p in produtos_disponiveis],
                    format_func=lambda x: next(
                        f"{p['nome']} | Estoque: {p['estoque']} | R$ {p['preco_venda']:.2f}" 
                        for p in produtos_disponiveis 
                        if str(p["_id"]) == x
                    ),
                    key="select_produto_nova_venda"
                )
            with col_p2:
                quantidade = st.number_input(
                    "Quantidade",
                    min_value=1,
                    value=1,
                    key="qtd_produto_nova_venda"
                )
            with col_p3:
                st.write("")  # Espa√ßamento
                if st.button("‚ûï Adicionar", key="btn_add_item", use_container_width=True):
                    try:
                        produto = next(p for p in produtos_disponiveis if str(p["_id"]) == produto_id)
                        
                        if quantidade > produto['estoque']:
                            st.error(f"Estoque insuficiente! Dispon√≠vel: {produto['estoque']}")
                        else:
                            # Verifica se o produto j√° est√° na venda
                            item_existente = next(
                                (item for item in st.session_state.itens_venda 
                                if item['produto_id'] == produto_id), None)
                            
                            if item_existente:
                                nova_quantidade = item_existente['quantidade'] + quantidade
                                if nova_quantidade > produto['estoque']:
                                    st.error(f"Quantidade total excede o estoque! Dispon√≠vel: {produto['estoque']}")
                                else:
                                    item_existente['quantidade'] = nova_quantidade
                                    item_existente['subtotal'] = nova_quantidade * item_existente['preco_unitario']
                                    st.success(f"Quantidade de {produto['nome']} atualizada para {nova_quantidade}")
                            else:
                                st.session_state.itens_venda.append({
                                    'produto_id': produto_id,
                                    'nome': produto['nome'],
                                    'quantidade': quantidade,
                                    'preco_unitario': produto['preco_venda'],
                                    'custo_unitario': produto.get('custo_producao', 0),
                                    'subtotal': quantidade * produto['preco_venda']
                                })
                                st.success(f"{produto['nome']} adicionado √† venda!")
                            st.rerun()
                    except Exception as e:
                        st.error(f"Erro ao adicionar produto: {str(e)}")

        # Lista de itens adicionados
        if st.session_state.itens_venda:
            st.subheader("Itens da Venda", divider="rainbow")
            
            # Cria DataFrame para exibi√ß√£o
            df_itens = pd.DataFrame(st.session_state.itens_venda)
            df_itens['Remover'] = False
            
            # Editor de dados com op√ß√£o de remo√ß√£o
            edited_df = st.data_editor(
                df_itens[['nome', 'quantidade', 'preco_unitario', 'subtotal', 'Remover']],
                column_config={
                    "preco_unitario": st.column_config.NumberColumn(
                        "Pre√ßo Unit√°rio",
                        format="R$ %.2f"
                    ),
                    "subtotal": st.column_config.NumberColumn(
                        "Subtotal",
                        format="R$ %.2f"
                    ),
                    "Remover": st.column_config.CheckboxColumn(
                        "Remover?",
                        default=False
                    )
                },
                hide_index=True,
                use_container_width=True,
                key="editor_itens_venda"
            )
            
            # Processa remo√ß√£o de itens marcados
            if not edited_df[edited_df['Remover']].empty:
                itens_manter = [item for idx, item in enumerate(st.session_state.itens_venda) 
                               if not edited_df.iloc[idx]['Remover']]
                st.session_state.itens_venda = itens_manter
                st.rerun()
            
            # Calcula totais
            total_venda = sum(item['subtotal'] for item in st.session_state.itens_venda)
            lucro_estimado = sum(
                (item['preco_unitario'] - item['custo_unitario']) * item['quantidade']
                for item in st.session_state.itens_venda
            )
            
            # Exibe totais
            col_res1, col_res2, col_res3 = st.columns(3)
            with col_res1:
                st.metric("Total Itens", len(st.session_state.itens_venda))
            with col_res2:
                st.metric("Total da Venda", f"R$ {total_venda:,.2f}")
            with col_res3:
                st.metric("Lucro Estimado", f"R$ {lucro_estimado:,.2f}")
            
            # Se√ß√£o de Pagamento
            st.subheader("Forma de Pagamento", divider="rainbow")
            
            metodo_pagamento = st.radio(
                "M√©todo de Pagamento*",
                ["Dinheiro", "Cart√£o de Cr√©dito", "Cart√£o de D√©bito", "PIX", "Transfer√™ncia Banc√°ria"],
                horizontal=True
            )
            
            # Configura√ß√µes espec√≠ficas por m√©todo de pagamento
            detalhes_pagamento = {}
            
            if metodo_pagamento == "Dinheiro":
                valor_recebido = st.number_input(
                    "Valor Recebido (R$)*",
                    min_value=0.0,
                    value=float(total_venda),
                    step=1.0,
                    format="%.2f"
                )
                troco = valor_recebido - total_venda
                if troco >= 0:
                    st.success(f"Troco: R$ {troco:.2f}")
                    detalhes_pagamento["troco"] = troco
                else:
                    st.error("Valor insuficiente!")
                    st.stop()
            
            elif "Cart√£o" in metodo_pagamento:
                parcelas = st.selectbox(
                    "N√∫mero de Parcelas*",
                    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
                    index=0
                )
                valor_parcela = total_venda / parcelas
                st.write(f"üí∏ {parcelas}x de R$ {valor_parcela:.2f}")
                detalhes_pagamento["parcelas"] = parcelas
            
            elif metodo_pagamento == "PIX":
                st.write("üî≥ **Chave PIX:** `vendas@sualoja.com.br`")
                st.image("https://via.placeholder.com/200?text=QR+CODE+PIX", width=200)
            
            elif metodo_pagamento == "Transfer√™ncia Banc√°ria":
                st.write("üè¶ **Dados para Transfer√™ncia:**")
                st.write("- Banco: **000** | Ag√™ncia: **1234** | Conta: **56789-0**")
                comprovante = st.file_uploader("Envie o comprovante (opcional)", type=["jpg", "png", "pdf"])
                if comprovante:
                    detalhes_pagamento["comprovante"] = "Enviado"
            
            # Finaliza√ß√£o da venda
            if st.button("‚úÖ Finalizar Venda", type="primary", use_container_width=True):
                try:
                    with st.spinner("Processando venda..."):
                        # Cria a venda principal
                        nova_venda = {
                            "cliente_id": cliente_id,
                            "data_venda": datetime.now(),
                            "valor_total": total_venda,
                            "lucro_total": lucro_estimado,
                            "status": "conclu√≠da",
                            "itens_count": len(st.session_state.itens_venda),
                            "metodo_pagamento": metodo_pagamento.lower(),
                            "detalhes_pagamento": detalhes_pagamento
                        }
                        
                        # Insere a venda e obt√©m o ID
                        venda_id = vendas_col.insert_one(nova_venda).inserted_id
                        
                        # Registra os itens e atualiza estoque
                        for item in st.session_state.itens_venda:
                            # Item da venda
                            itens_col.insert_one({
                                "venda_id": str(venda_id),
                                "produto_id": item['produto_id'],
                                "quantidade": item['quantidade'],
                                "preco_unitario": item['preco_unitario'],
                                "custo_unitario": item['custo_unitario'],
                                "subtotal": item['subtotal']
                            })
                            
                            # Atualiza estoque
                            produtos_col.update_one(
                                {"_id": ObjectId(item['produto_id'])},
                                {"$inc": {"estoque": -item['quantidade']}}
                            )
                        
                        # Atualiza estat√≠sticas do cliente
                        clientes_col.update_one(
                            {"_id": ObjectId(cliente_id)},
                            {
                                "$inc": {
                                    "compras_realizadas": 1,
                                    "total_gasto": total_venda
                                },
                                "$set": {
                                    "ultima_compra": datetime.now()
                                }
                            }
                        )
                        
                        # Sucesso - mostra resumo e limpa a venda
                        st.success("Venda registrada com sucesso!")
                        st.balloons()
                        
                        # Exibe resumo da venda
                        with st.expander("üìù Resumo da Venda", expanded=True):
                            cliente = clientes_col.find_one({"_id": ObjectId(cliente_id)})
                            st.write(f"**Cliente:** {cliente['nome']}")
                            st.write(f"**Data/Hora:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
                            st.write(f"**Total:** R$ {total_venda:,.2f}")
                            st.write(f"**Pagamento:** {metodo_pagamento}")
                            if metodo_pagamento == "Dinheiro":
                                st.write(f"**Valor Recebido:** R$ {valor_recebido:,.2f}")
                                st.write(f"**Troco:** R$ {troco:,.2f}")
                            elif "Cart√£o" in metodo_pagamento:
                                st.write(f"**Parcelas:** {parcelas}x de R$ {valor_parcela:,.2f}")
                            
                            st.write("**Itens:**")
                            for item in st.session_state.itens_venda:
                                st.write(f"- {item['nome']} ({item['quantidade']} x R$ {item['preco_unitario']:.2f})")
                        
                        # Limpa os itens da sess√£o
                        del st.session_state.itens_venda
                        pytime.sleep(3)
                        st.rerun()
                        
                except Exception as e:
                    st.error(f"Erro ao registrar venda: {str(e)}")
                    st.error("Nenhuma altera√ß√£o foi aplicada no banco de dados.")

    with tab2:
        st.subheader("Hist√≥rico de Vendas")
        
        # Filtros
        with st.expander("üîé Filtros", expanded=True):
            col_f1, col_f2, col_f3 = st.columns(3)
            with col_f1:
                data_inicio = st.date_input(
                    "Data inicial", 
                    value=datetime.now() - timedelta(days=30),
                    key="hist_data_inicio"
                )
            with col_f2:
                data_fim = st.date_input(
                    "Data final", 
                    value=datetime.now(),
                    key="hist_data_fim"
                )
            with col_f3:
                filtro_pagamento = st.selectbox(
                    "Forma de Pagamento",
                    ["Todas", "Dinheiro", "Cart√£o de Cr√©dito", "Cart√£o de D√©bito", "PIX", "Transfer√™ncia Banc√°ria"],
                    index=0
                )
        
        # Aplica filtros
        filtro = {
            "data_venda": {
                "$gte": datetime.combine(data_inicio, datetime.min.time()),
                "$lte": datetime.combine(data_fim, datetime.max.time())
            }
        }
        
        if filtro_pagamento != "Todas":
            filtro["metodo_pagamento"] = filtro_pagamento.lower()
        
        try:
            # Consulta as vendas
            vendas = list(vendas_col.find(filtro).sort("data_venda", -1).limit(100))
            
            if not vendas:
                st.info("Nenhuma venda encontrada no per√≠odo selecionado.")
            else:
                # Prepara dados para exibi√ß√£o
                dados_vendas = []
                for venda in vendas:
                    try:
                        cliente = clientes_col.find_one({"_id": ObjectId(venda["cliente_id"])})
                        dados_vendas.append({
                            "ID": str(venda["_id"]),
                            "Data": venda["data_venda"].strftime("%d/%m/%Y %H:%M"),
                            "Cliente": cliente["nome"] if cliente else "Cliente n√£o encontrado",
                            "Valor Total": venda["valor_total"],
                            "Pagamento": venda["metodo_pagamento"].capitalize(),
                            "Status": venda["status"].capitalize(),
                            "Itens": venda["itens_count"],
                            "A√ß√µes": "Manter"
                        })
                    except:
                        continue
                
                # Cria DataFrame
                df_vendas = pd.DataFrame(dados_vendas)
                
                # Editor com op√ß√£o de apagar
                edited_df = st.data_editor(
                    df_vendas,
                    column_config={
                        "Valor Total": st.column_config.NumberColumn(format="R$ %.2f"),
                        "A√ß√µes": st.column_config.SelectboxColumn(
                            "A√ß√µes",
                            options=["Manter", "Cancelar"],
                            required=True
                        )
                    },
                    hide_index=True,
                    use_container_width=True,
                    height=400,
                    key="editor_historico_vendas"
                )

                # Processa vendas marcadas para cancelar
                if not edited_df[edited_df['A√ß√µes'] == "Cancelar"].empty:
                    st.warning("‚ö†Ô∏è Aten√ß√£o: Esta a√ß√£o n√£o pode ser desfeita!")
                    
                    if st.button("Confirmar Cancelamento", type="primary"):
                        with st.spinner("Processando cancelamento..."):
                            try:
                                for idx, row in edited_df[edited_df['A√ß√µes'] == "Cancelar"].iterrows():
                                    venda_id = row['ID']
                                    
                                    # 1. Recupera itens da venda
                                    itens_venda = list(itens_col.find({"venda_id": venda_id}))
                                    
                                    # 2. Devolve ao estoque
                                    for item in itens_venda:
                                        produtos_col.update_one(
                                            {"_id": ObjectId(item["produto_id"])},
                                            {"$inc": {"estoque": item["quantidade"]}}
                                        )
                                    
                                    # 3. Remove itens
                                    itens_col.delete_many({"venda_id": venda_id})
                                    
                                    # 4. Atualiza cliente
                                    valor_venda = vendas_col.find_one({"_id": ObjectId(venda_id)})["valor_total"]
                                    clientes_col.update_one(
                                        {"_id": ObjectId(venda["cliente_id"])},
                                        {
                                            "$inc": {
                                                "compras_realizadas": -1,
                                                "total_gasto": -valor_venda
                                            }
                                        }
                                    )
                                    
                                    # 5. Atualiza status da venda
                                    vendas_col.update_one(
                                        {"_id": ObjectId(venda_id)},
                                        {"$set": {"status": "cancelada"}}
                                    )
                                
                                st.success("Vendas canceladas com sucesso!")
                                st.balloons()
                                st.rerun()
                            
                            except Exception as e:
                                st.error(f"Erro ao cancelar: {str(e)}")

                # Detalhes da venda selecionada
                if len(dados_vendas) > 0:
                    venda_selecionada = st.selectbox(
                        "Selecione uma venda para detalhar",
                        options=[v["ID"] for v in dados_vendas if v["A√ß√µes"] == "Manter"],
                        format_func=lambda x: next(
                            f"{v['Data']} - {v['Cliente']} - R$ {v['Valor Total']:.2f}" 
                            for v in dados_vendas 
                            if v["ID"] == x
                        ),
                        key="select_venda_detalhe"
                    )
                    
                    if venda_selecionada:
                        try:
                            # Busca itens da venda
                            itens_venda = list(itens_col.find({"venda_id": venda_selecionada}))
                            
                            if itens_venda:
                                dados_itens = []
                                for item in itens_venda:
                                    produto = produtos_col.find_one({"_id": ObjectId(item["produto_id"])})
                                    dados_itens.append({
                                        "Produto": produto["nome"] if produto else "Produto n√£o encontrado",
                                        "Quantidade": item["quantidade"],
                                        "Pre√ßo Unit√°rio": item["preco_unitario"],
                                        "Subtotal": item["quantidade"] * item["preco_unitario"]
                                    })
                                
                                st.dataframe(
                                    pd.DataFrame(dados_itens),
                                    column_config={
                                        "Pre√ßo Unit√°rio": st.column_config.NumberColumn(
                                            format="R$ %.2f"
                                        ),
                                        "Subtotal": st.column_config.NumberColumn(
                                            format="R$ %.2f"
                                        )
                                    },
                                    hide_index=True,
                                    use_container_width=True
                                )
                        except Exception as e:
                            st.error(f"Erro ao carregar itens da venda: {str(e)}")
        except Exception as e:
            st.error(f"Erro ao carregar hist√≥rico de vendas: {str(e)}")

    with tab3:
        st.subheader("Relat√≥rios de Vendas")
        
        # Filtro por per√≠odo
        col_r1, col_r2, col_r3 = st.columns(3)
        with col_r1:
            data_inicio_rel = st.date_input(
                "Data inicial", 
                value=datetime.now() - timedelta(days=30),
                key="rel_data_inicio"
            )
        with col_r2:
            data_fim_rel = st.date_input(
                "Data final", 
                value=datetime.now(),
                key="rel_data_fim"
            )
        with col_r3:
            filtro_pagamento_rel = st.selectbox(
                "Forma de Pagamento",
                ["Todas", "Dinheiro", "Cart√£o de Cr√©dito", "Cart√£o de D√©bito", "PIX", "Transfer√™ncia Banc√°ria"],
                index=0,
                key="rel_pagamento"
            )
        
        # M√©tricas r√°pidas
        if st.button("Gerar Relat√≥rio", key="btn_gerar_relatorio"):
            try:
                with st.spinner("Processando dados..."):
                    # Filtro de data
                    filtro_rel = {
                        "data_venda": {
                            "$gte": datetime.combine(data_inicio_rel, datetime.min.time()),
                            "$lte": datetime.combine(data_fim_rel, datetime.max.time())
                        },
                        "status": "conclu√≠da"
                    }
                    
                    if filtro_pagamento_rel != "Todas":
                        filtro_rel["metodo_pagamento"] = filtro_pagamento_rel.lower()
                    
                    # Calcula m√©tricas b√°sicas
                    total_vendas = vendas_col.count_documents(filtro_rel)
                    
                    faturamento_result = vendas_col.aggregate([
                        {"$match": filtro_rel},
                        {"$group": {"_id": None, "total": {"$sum": "$valor_total"}}}
                    ])
                    faturamento_total = next(faturamento_result, {"total": 0})["total"]
                    
                    lucro_result = vendas_col.aggregate([
                        {"$match": filtro_rel},
                        {"$group": {"_id": None, "total": {"$sum": "$lucro_total"}}}
                    ])
                    lucro_total = next(lucro_result, {"total": 0})["total"]
                    
                    # Exibe m√©tricas
                    col_met1, col_met2, col_met3 = st.columns(3)
                    with col_met1:
                        st.metric("Total de Vendas", total_vendas)
                    with col_met2:
                        st.metric("Faturamento Total", f"R$ {faturamento_total:,.2f}")
                    with col_met3:
                        st.metric("Lucro Total", f"R$ {lucro_total:,.2f}")
                    
                    # Gr√°fico de vendas por dia
                    st.subheader("Vendas por Dia")
                    vendas_diarias = vendas_col.aggregate([
                        {"$match": filtro_rel},
                        {"$project": {
                            "data": {"$dateToString": {"format": "%Y-%m-%d", "date": "$data_venda"}},
                            "valor_total": 1
                        }},
                        {"$group": {
                            "_id": "$data",
                            "total": {"$sum": "$valor_total"},
                            "qtd": {"$sum": 1}
                        }},
                        {"$sort": {"_id": 1}}
                    ])
                    
                    df_diario = pd.DataFrame(list(vendas_diarias))
                    if not df_diario.empty:
                        df_diario = df_diario.rename(columns={"_id": "Data", "total": "Valor", "qtd": "Quantidade"})
                        
                        tab1, tab2 = st.tabs(["Gr√°fico", "Tabela"])
                        with tab1:
                            st.bar_chart(df_diario.set_index("Data")["Valor"])
                        with tab2:
                            st.dataframe(
                                df_diario,
                                column_config={
                                    "Valor": st.column_config.NumberColumn(format="R$ %.2f")
                                },
                                hide_index=True
                            )
                    else:
                        st.info("Nenhum dado dispon√≠vel para o per√≠odo selecionado.")
                    
                    # Vendas por forma de pagamento
                    st.subheader("Vendas por Forma de Pagamento")
                    vendas_pagamento = vendas_col.aggregate([
                        {"$match": filtro_rel},
                        {"$group": {
                            "_id": "$metodo_pagamento",
                            "total": {"$sum": "$valor_total"},
                            "count": {"$sum": 1}
                        }},
                        {"$sort": {"total": -1}}
                    ])
                    
                    df_pagamento = pd.DataFrame(list(vendas_pagamento))
                    if not df_pagamento.empty:
                        df_pagamento = df_pagamento.rename(columns={"_id": "Pagamento", "total": "Valor", "count": "Quantidade"})
                        st.bar_chart(df_pagamento.set_index("Pagamento")["Valor"])
                    else:
                        st.info("Nenhum dado dispon√≠vel sobre formas de pagamento.")
                    
                    # Top produtos
                    st.subheader("Produtos Mais Vendidos")
                    top_produtos = itens_col.aggregate([
                        {"$lookup": {
                            "from": "vendas",
                            "localField": "venda_id",
                            "foreignField": "_id",
                            "as": "venda"
                        }},
                        {"$unwind": "$venda"},
                        {"$match": filtro_rel},
                        {"$group": {
                            "_id": "$produto_id",
                            "total_vendido": {"$sum": "$quantidade"},
                            "faturamento": {"$sum": {"$multiply": ["$quantidade", "$preco_unitario"]}}
                        }},
                        {"$sort": {"total_vendido": -1}},
                        {"$limit": 5}
                    ])
                    
                    top_produtos = list(top_produtos)
                    if top_produtos:
                        for produto in top_produtos:
                            p = produtos_col.find_one({"_id": ObjectId(produto["_id"])})
                            if p:
                                with st.expander(f"**{p['nome']}**"):
                                    col_p1, col_p2 = st.columns(2)
                                    with col_p1:
                                        st.write(f"**Quantidade:** {produto['total_vendido']} unidades")
                                        st.write(f"**Faturamento:** R$ {produto['faturamento']:,.2f}")
                                    with col_p2:
                                        percentual = (produto['total_vendido'] / (produto['total_vendido'] + 10)) * 100
                                        st.progress(min(percentual, 100))
                    else:
                        st.info("Nenhum dado dispon√≠vel sobre produtos vendidos.")
                    
                    # Exporta√ß√£o para Excel
                    st.subheader("Exportar Dados")
                    vendas_export = list(vendas_col.find(filtro_rel))
                    if vendas_export:
                        df_export = pd.DataFrame([{
                            "Data": v["data_venda"].strftime("%d/%m/%Y %H:%M"),
                            "Cliente": clientes_col.find_one({"_id": ObjectId(v["cliente_id"])})["nome"],
                            "Valor Total": v["valor_total"],
                            "Pagamento": v["metodo_pagamento"].capitalize(),
                            "Itens": v["itens_count"]
                        } for v in vendas_export])
                        
                        excel_data = generate_excel(df_export)
                        st.download_button(
                            label="üì• Exportar para Excel",
                            data=excel_data,
                            file_name=f"relatorio_vendas_{datetime.now().strftime('%Y%m%d')}.xlsx",
                            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                        )
                    else:
                        st.warning("Nenhum dado para exportar")
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {str(e)}")

# =============================================
# M√ìDULO DE RELAT√ìRIOS
# =============================================

def modulo_relatorios(db):
    verificar_autenticacao(db)
    st.title("üìä Painel Estrat√©gico")
    
    vendas_col = db['vendas']
    produtos_col = db['produtos']
    clientes_col = db['clientes']
    itens_col = db['itens_venda']
    usuarios_col = db['usuarios']

    tab1, tab2, tab3 = st.tabs(["üìà Vis√£o Geral", "üì¶ Produtos", "üë• Clientes"])

    with tab1:
        st.subheader("Vis√£o Geral do Neg√≥cio")
        
        # Filtros por per√≠odo
        col1, col2 = st.columns(2)
        with col1:
            data_inicio = st.date_input(
                "Data In√≠cio",
                value=datetime.now() - timedelta(days=30),
                key="geral_inicio"
            )
        with col2:
            data_fim = st.date_input(
                "Data Fim",
                value=datetime.now(),
                key="geral_fim"
            )
        
        if st.button("Atualizar Relat√≥rio", key="btn_atualizar_geral"):
            try:
                # Filtro de per√≠odo
                filtro_periodo = {
                    "data_venda": {
                        "$gte": datetime.combine(data_inicio, datetime.min.time()),
                        "$lte": datetime.combine(data_fim, datetime.max.time())
                    },
                    "status": "conclu√≠da"
                }
                
                # 1. M√©tricas Principais
                st.subheader("üîç M√©tricas Principais")
                
                # Consultas principais
                total_vendas = vendas_col.count_documents(filtro_periodo)
                
                faturamento_result = vendas_col.aggregate([
                    {"$match": filtro_periodo},
                    {"$group": {"_id": None, "total": {"$sum": "$valor_total"}}}
                ])
                faturamento_total = next(faturamento_result, {"total": 0})["total"]
                
                lucro_result = vendas_col.aggregate([
                    {"$match": filtro_periodo},
                    {"$group": {"_id": None, "total": {"$sum": "$lucro_total"}}}
                ])
                lucro_total = next(lucro_result, {"total": 0})["total"]
                
                # Clientes ativos
                clientes_ativos = clientes_col.count_documents({"status": "ativo"})
                
                # Produtos ativos
                produtos_ativos = produtos_col.count_documents({"ativo": True})
                
                # Exibe m√©tricas em colunas
                col_m1, col_m2, col_m3, col_m4 = st.columns(4)
                with col_m1:
                    st.metric("Total de Vendas", total_vendas)
                with col_m2:
                    st.metric("Faturamento Total", f"R$ {faturamento_total:,.2f}")
                with col_m3:
                    st.metric("Lucro Total", f"R$ {lucro_total:,.2f}")
                with col_m4:
                    st.metric("Margem L√≠quida", f"{(lucro_total/faturamento_total*100 if faturamento_total > 0 else 0):.1f}%")
                
                col_m5, col_m6, col_m7, col_m8 = st.columns(4)
                with col_m5:
                    st.metric("Clientes Ativos", clientes_ativos)
                with col_m6:
                    st.metric("Produtos Ativos", produtos_ativos)
                with col_m7:
                    ticket_medio = faturamento_total/total_vendas if total_vendas > 0 else 0
                    st.metric("Ticket M√©dio", f"R$ {ticket_medio:,.2f}")
                with col_m8:
                    usuarios_ativos = usuarios_col.count_documents({"ativo": True})
                    st.metric("Usu√°rios Ativos", usuarios_ativos)
                
                # 2. An√°lise Temporal
                st.subheader("üìÖ An√°lise Temporal")
                
                # Vendas por dia
                vendas_diarias = vendas_col.aggregate([
                    {"$match": filtro_periodo},
                    {"$project": {
                        "data": {"$dateToString": {"format": "%Y-%m-%d", "date": "$data_venda"}},
                        "valor_total": 1,
                        "lucro_total": 1
                    }},
                    {"$group": {
                        "_id": "$data",
                        "total_vendas": {"$sum": 1},
                        "total_faturamento": {"$sum": "$valor_total"},
                        "total_lucro": {"$sum": "$lucro_total"}
                    }},
                    {"$sort": {"_id": 1}}
                ])
                
                df_diario = pd.DataFrame(list(vendas_diarias))
                if not df_diario.empty:
                    df_diario['_id'] = pd.to_datetime(df_diario['_id'])
                    df_diario = df_diario.set_index('_id')
                    
                    tab1, tab2, tab3 = st.tabs(["Vendas", "Faturamento", "Lucro"])
                    with tab1:
                        st.line_chart(df_diario['total_vendas'])
                    with tab2:
                        st.line_chart(df_diario['total_faturamento'])
                    with tab3:
                        st.line_chart(df_diario['total_lucro'])
                else:
                    st.info("Nenhuma venda no per√≠odo selecionado.")
                
                # 3. M√©tricas por Forma de Pagamento
                st.subheader("üí≥ An√°lise por Forma de Pagamento")
                
                pagamento_analise = vendas_col.aggregate([
                    {"$match": filtro_periodo},
                    {"$group": {
                        "_id": "$metodo_pagamento",
                        "total_vendas": {"$sum": 1},
                        "total_faturamento": {"$sum": "$valor_total"},
                        "total_lucro": {"$sum": "$lucro_total"}
                    }},
                    {"$addFields": {
                        "percentual_faturamento": {
                            "$multiply": [
                                {"$divide": ["$total_faturamento", faturamento_total]},
                                100
                            ]
                        },
                        "ticket_medio": {
                            "$divide": ["$total_faturamento", "$total_vendas"]
                        }
                    }},
                    {"$sort": {"total_faturamento": -1}}
                ])
                
                df_pagamento = pd.DataFrame(list(pagamento_analise))
                if not df_pagamento.empty:
                    df_pagamento = df_pagamento.rename(columns={
                        "_id": "Pagamento",
                        "total_vendas": "Vendas",
                        "total_faturamento": "Faturamento",
                        "total_lucro": "Lucro",
                        "percentual_faturamento": "% Faturamento",
                        "ticket_medio": "Ticket M√©dio"
                    })
                    
                    # Formata valores
                    df_pagamento['Faturamento'] = df_pagamento['Faturamento'].apply(lambda x: f"R$ {x:,.2f}")
                    df_pagamento['Lucro'] = df_pagamento['Lucro'].apply(lambda x: f"R$ {x:,.2f}")
                    df_pagamento['% Faturamento'] = df_pagamento['% Faturamento'].apply(lambda x: f"{x:.1f}%")
                    df_pagamento['Ticket M√©dio'] = df_pagamento['Ticket M√©dio'].apply(lambda x: f"R$ {x:,.2f}")
                    
                    st.dataframe(
                        df_pagamento,
                        column_order=["Pagamento", "Vendas", "Faturamento", "Lucro", "% Faturamento", "Ticket M√©dio"],
                        hide_index=True,
                        use_container_width=True
                    )
                else:
                    st.info("Nenhum dado dispon√≠vel sobre formas de pagamento.")
                
                # 4. Indicadores de Desempenho
                st.subheader("üìä Indicadores de Desempenho")
                
                # Comparativo com per√≠odo anterior
                # Calcula a diferen√ßa de dias entre data_fim e data_inicio
                dias_periodo = (data_fim - data_inicio).days

                # Define o per√≠odo anterior com a mesma dura√ß√£o do per√≠odo atual
                periodo_anterior = {
                            "$gte": datetime.combine(data_inicio - timedelta(days=dias_periodo), datetime.min.time()),
                        "$lte": datetime.combine(data_inicio - timedelta(days=1), datetime.max.time())
                                        }
                
                faturamento_anterior = next(vendas_col.aggregate([
                    {"$match": {"data_venda": periodo_anterior, "status": "conclu√≠da"}},
                    {"$group": {"_id": None, "total": {"$sum": "$valor_total"}}}
                ]), {"total": 0})["total"]
                
                variacao_faturamento = ((faturamento_total - faturamento_anterior) / faturamento_anterior * 100) if faturamento_anterior > 0 else 0
                
                col_i1, col_i2, col_i3 = st.columns(3)
                with col_i1:
                    st.metric(
                        "Faturamento vs Per√≠odo Anterior",
                        f"R$ {faturamento_total:,.2f}",
                        delta=f"{variacao_faturamento:.1f}%",
                        delta_color="normal" if variacao_faturamento >= 0 else "inverse"
                    )
                with col_i2:
                    produtos_mais_vendidos = list(itens_col.aggregate([
                        {"$lookup": {
                            "from": "vendas",
                            "localField": "venda_id",
                            "foreignField": "_id",
                            "as": "venda"
                        }},
                        {"$unwind": "$venda"},
                        {"$match": filtro_periodo},
                        {"$group": {
                            "_id": "$produto_id",
                            "total_vendido": {"$sum": "$quantidade"}
                        }},
                        {"$sort": {"total_vendido": -1}},
                        {"$limit": 1}
                    ]))
                    
                    if produtos_mais_vendidos:
                        produto = produtos_col.find_one({"_id": produtos_mais_vendidos[0]["_id"]})
                        st.metric(
                            "Produto Mais Vendido",
                            produto["nome"],
                            delta=f"{produtos_mais_vendidos[0]['total_vendido']} unidades"
                        )
                    else:
                        st.metric("Produto Mais Vendido", "Nenhum")
                with col_i3:
                    cliente_top = next(clientes_col.aggregate([
                        {"$lookup": {
                            "from": "vendas",
                            "localField": "_id",
                            "foreignField": "cliente_id",
                            "as": "vendas"
                        }},
                        {"$match": {"vendas.data_venda": filtro_periodo["data_venda"]}},
                        {"$project": {
                            "nome": 1,
                            "total_gasto": {"$sum": "$vendas.valor_total"}
                        }},
                        {"$sort": {"total_gasto": -1}},
                        {"$limit": 1}
                    ]), None)
                    
                    if cliente_top:
                        st.metric(
                            "Cliente Top",
                            cliente_top["nome"],
                            delta=f"R$ {cliente_top['total_gasto']:,.2f}"
                        )
                    else:
                        st.metric("Cliente Top", "Nenhum")
                
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {str(e)}")

    with tab2:
        st.subheader("An√°lise de Produtos")
        
        if st.button("Atualizar Relat√≥rio de Produtos", key="btn_atualizar_produtos"):
            try:
                # 1. M√©tricas de Produtos
                st.subheader("üì¶ M√©tricas de Produtos")
                
                # Consultas principais
                pipeline_estoque = [
                    {"$match": {"ativo": True}},
                    {"$group": {
                        "_id": None,
                        "total_estoque": {"$sum": "$estoque"},
                        "valor_estoque": {"$sum": {"$multiply": ["$estoque", "$preco_venda"]}},
                        "custo_estoque": {"$sum": {"$multiply": ["$estoque", "$custo_producao"]}}
                    }}
                ]
                
                estoque_data = next(produtos_col.aggregate(pipeline_estoque), {
                    "total_estoque": 0,
                    "valor_estoque": 0,
                    "custo_estoque": 0
                })
                
                # Vendas de produtos
                pipeline_vendas = [
                    {"$lookup": {
                        "from": "itens_venda",
                        "localField": "_id",
                        "foreignField": "produto_id",
                        "as": "itens_venda"
                    }},
                    {"$project": {
                        "nome": 1,
                        "categoria": 1,
                        "preco_venda": 1,
                        "custo_producao": 1,
                        "estoque": 1,
                        "vendidos": {"$sum": "$itens_venda.quantidade"},
                        "faturamento": {
                            "$sum": {
                                "$map": {
                                    "input": "$itens_venda",
                                    "as": "item",
                                    "in": {"$multiply": ["$$item.quantidade", "$$item.preco_unitario"]}
                                }
                            }
                        },
                        "lucro": {
                            "$sum": {
                                "$map": {
                                    "input": "$itens_venda",
                                    "as": "item",
                                    "in": {
                                        "$multiply": [
                                            {"$subtract": ["$$item.preco_unitario", "$custo_producao"]},
                                            "$$item.quantidade"
                                        ]
                                    }
                                }
                            }
                        }
                    }},
                    {"$sort": {"vendidos": -1}}
                ]
                
                produtos_data = list(produtos_col.aggregate(pipeline_vendas))
                
                # Exibe m√©tricas
                col_p1, col_p2, col_p3, col_p4 = st.columns(4)
                with col_p1:
                    st.metric("Produtos Ativos", produtos_col.count_documents({"ativo": True}))
                with col_p2:
                    st.metric("Total em Estoque", estoque_data["total_estoque"])
                with col_p3:
                    st.metric("Valor do Estoque", f"R$ {estoque_data['valor_estoque']:,.2f}")
                with col_p4:
                    st.metric("Custo do Estoque", f"R$ {estoque_data['custo_estoque']:,.2f}")
                
                # 2. An√°lise por Categoria
                st.subheader("üìä An√°lise por Categoria")
                
                if produtos_data:
                    df_produtos = pd.DataFrame(produtos_data)
                    
                    categoria_analise = df_produtos.groupby('categoria').agg({
                        'nome': 'count',
                        'vendidos': 'sum',
                        'faturamento': 'sum',
                        'lucro': 'sum'
                    }).rename(columns={
                        'nome': 'Quantidade',
                        'vendidos': 'Unidades Vendidas',
                        'faturamento': 'Faturamento',
                        'lucro': 'Lucro'
                    })
                    
                    categoria_analise['Margem'] = (categoria_analise['Lucro'] / categoria_analise['Faturamento']) * 100
                    
                    st.dataframe(
                        categoria_analise,
                        column_config={
                            "Faturamento": st.column_config.NumberColumn(format="R$ %.2f"),
                            "Lucro": st.column_config.NumberColumn(format="R$ %.2f"),
                            "Margem": st.column_config.NumberColumn(format="%.1f%%")
                        },
                        use_container_width=True
                    )
                    
                    # 3. Top Produtos
                    st.subheader("üèÜ Top Produtos")
                    
                    top_col1, top_col2 = st.columns(2)
                    
                    with top_col1:
                        st.markdown("**Mais Vendidos (Quantidade)**")
                        top_vendidos = df_produtos.sort_values('vendidos', ascending=False).head(5)
                        st.dataframe(
                            top_vendidos[['nome', 'categoria', 'vendidos']],
                            column_config={
                                "vendidos": "Unidades Vendidas"
                            },
                            hide_index=True
                        )
                    
                    with top_col2:
                        st.markdown("**Maior Faturamento**")
                        top_faturamento = df_produtos.sort_values('faturamento', ascending=False).head(5)
                        st.dataframe(
                            top_faturamento[['nome', 'categoria', 'faturamento']],
                            column_config={
                                "faturamento": st.column_config.NumberColumn(format="R$ %.2f")
                            },
                            hide_index=True
                        )
                    
                    # 4. Produtos em Risco
                    st.subheader("‚ö†Ô∏è Produtos em Risco")
                    
                    risco_col1, risco_col2 = st.columns(2)
                    
                    with risco_col1:
                        st.markdown("**Estoque Baixo (<10 unidades)**")
                        estoque_baixo = df_produtos[df_produtos['estoque'] < 10].sort_values('estoque')
                        if not estoque_baixo.empty:
                            st.dataframe(
                                estoque_baixo[['nome', 'categoria', 'estoque']],
                                hide_index=True
                            )
                        else:
                            st.success("Nenhum produto com estoque baixo!")
                    
                    with risco_col2:
                        st.markdown("**Sem Vendas Recentes**")
                        produtos_sem_vendas = df_produtos[df_produtos['vendidos'] == 0]
                        if not produtos_sem_vendas.empty:
                            st.dataframe(
                                produtos_sem_vendas[['nome', 'categoria', 'estoque']],
                                hide_index=True
                            )
                        else:
                            st.success("Todos os produtos tiveram vendas!")
                    
                else:
                    st.info("Nenhum dado dispon√≠vel sobre produtos.")
                
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {str(e)}")

    with tab3:
        st.subheader("An√°lise de Clientes")
        
        # Filtros para clientes
        col_c1, col_c2 = st.columns(2)
        with col_c1:
            data_inicio_clientes = st.date_input(
                "Data In√≠cio",
                value=datetime.now() - timedelta(days=90),
                key="clientes_inicio"
            )
        with col_c2:
            data_fim_clientes = st.date_input(
                "Data Fim",
                value=datetime.now(),
                key="clientes_fim"
            )
        
        if st.button("Atualizar Relat√≥rio de Clientes", key="btn_atualizar_clientes"):
            try:
                # Filtro de per√≠odo
                filtro_periodo_clientes = {
                    "data_venda": {
                        "$gte": datetime.combine(data_inicio_clientes, datetime.min.time()),
                        "$lte": datetime.combine(data_fim_clientes, datetime.max.time())
                    },
                    "status": "conclu√≠da"
                }
                
                # 1. M√©tricas de Clientes
                st.subheader("üë• M√©tricas de Clientes")
                
                # Consultas principais
                total_clientes = clientes_col.count_documents({})
                clientes_ativos = clientes_col.count_documents({"status": "ativo"})
                
                pipeline_clientes = [
                    {"$lookup": {
                        "from": "vendas",
                        "localField": "_id",
                        "foreignField": "cliente_id",
                        "as": "vendas"
                    }},
                    {"$project": {
                        "nome": 1,
                        "tipo": 1,
                        "status": 1,
                        "total_compras": {"$size": "$vendas"},
                        "total_gasto": {"$sum": "$vendas.valor_total"},
                        "ultima_compra": {"$max": "$vendas.data_venda"}
                    }},
                    {"$sort": {"total_gasto": -1}}
                ]
                
                clientes_data = list(clientes_col.aggregate(pipeline_clientes))
                
                # Exibe m√©tricas
                col_c1, col_c2, col_c3, col_c4 = st.columns(4)
                with col_c1:
                    st.metric("Total de Clientes", total_clientes)
                with col_c2:
                    st.metric("Clientes Ativos", clientes_ativos)
                with col_c3:
                    clientes_compraram = len([c for c in clientes_data if c["total_compras"] > 0])
                    st.metric("Clientes que Compraram", clientes_compraram)
                with col_c4:
                    st.metric("Taxa de Reten√ß√£o", f"{(clientes_compraram/clientes_ativos*100 if clientes_ativos > 0 else 0):.1f}%")
                
                # 2. Segmenta√ß√£o de Clientes
                st.subheader("üìä Segmenta√ß√£o de Clientes")
                
                if clientes_data:
                    df_clientes = pd.DataFrame(clientes_data)
                    
                    # An√°lise por tipo
                    tipo_analise = df_clientes.groupby('tipo').agg({
                        'nome': 'count',
                        'total_compras': 'sum',
                        'total_gasto': 'sum'
                    }).rename(columns={
                        'nome': 'Quantidade',
                        'total_compras': 'Compras',
                        'total_gasto': 'Faturamento'
                    })
                    
                    tipo_analise['Ticket M√©dio'] = tipo_analise['Faturamento'] / tipo_analise['Compras']
                    
                    st.dataframe(
                        tipo_analise,
                        column_config={
                            "Faturamento": st.column_config.NumberColumn(format="R$ %.2f"),
                            "Ticket M√©dio": st.column_config.NumberColumn(format="R$ %.2f")
                        },
                        use_container_width=True
                    )
                    
                    # 3. Clientes VIP
                    st.subheader("üèÜ Clientes VIP (Top 10)")
                    
                    clientes_vip = df_clientes[df_clientes['total_compras'] > 0].sort_values('total_gasto', ascending=False).head(10)
                    
                    if not clientes_vip.empty:
                        st.dataframe(
                            clientes_vip[['nome', 'tipo', 'total_compras', 'total_gasto']],
                            column_config={
                                "total_compras": "Compras",
                                "total_gasto": st.column_config.NumberColumn("Faturamento", format="R$ %.2f")
                            },
                            hide_index=True,
                            use_container_width=True
                        )
                    else:
                        st.info("Nenhum cliente com compras no per√≠odo.")
                    
                    # 4. Clientes Inativos
                    st.subheader("üí§ Clientes Inativos (Sem compras nos √∫ltimos 90 dias)")
                    
                    limite_inatividade = datetime.now() - timedelta(days=90)
                    clientes_inativos = df_clientes[
                        (df_clientes['ultima_compra'].isna()) | 
                        (df_clientes['ultima_compra'] < limite_inatividade)
                    ]
                    
                    if not clientes_inativos.empty:
                        st.dataframe(
                            clientes_inativos[['nome', 'tipo', 'ultima_compra']],
                            column_config={
                                "ultima_compra": st.column_config.DatetimeColumn("√öltima Compra", format="DD/MM/YYYY")
                            },
                            hide_index=True,
                            use_container_width=True
                        )
                    else:
                        st.success("Todos os clientes fizeram compras recentemente!")
                    
                else:
                    st.info("Nenhum dado dispon√≠vel sobre clientes.")
                
            except Exception as e:
                st.error(f"Erro ao gerar relat√≥rio: {str(e)}")

# =============================================
# FUN√á√ÉO PRINCIPAL
# =============================================

def main():
    st.set_page_config(
        page_title="Sari Dulces iGEST",
        page_icon="üõí",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Inicializa sistema de autentica√ß√£o
    inicializar_autenticacao()
    
    # Conex√£o com o banco de dados
    db = get_database()
    if db is None:
        st.error("N√£o foi poss√≠vel conectar ao banco de dados. Verifique sua conex√£o com a internet e as credenciais do MongoDB.")
        return
    
    # Verifica autentica√ß√£o antes de mostrar qualquer conte√∫do
    if not st.session_state.autenticado:
        pagina_login(db)
        st.stop()
    
    # Menu lateral (apenas para usu√°rios autenticados)
    with st.sidebar:
        st.title("üõí Sari Dulces iGEST")
        st.markdown(f"**Usu√°rio:** {st.session_state.usuario_atual['nome']}")
        st.markdown(f"**N√≠vel:** {st.session_state.usuario_atual['nivel_acesso'].capitalize()}")
        st.markdown("---")
        
        opcoes_menu = ["üë• Clientes", "üì¶ Produtos", "üí∞ Vendas", "üìä Relat√≥rios"]
        
        # Adiciona gest√£o de usu√°rios apenas para administradores
        if st.session_state.usuario_atual['nivel_acesso'] in ['admin', 'gerente']:
            opcoes_menu.append("üë®‚Äçüíº Usu√°rios")
        
        menu = st.radio(
            "Menu Principal",
            opcoes_menu,
            index=0
        )
        
        st.markdown("---")
        
        # Bot√£o para alterar senha
        if st.button("üîë Alterar Minha Senha", use_container_width=True):
            st.session_state.pagina_atual = "alterar_senha"
            st.rerun()
        
        # Bot√£o para sair
        if st.button("üö™ Sair", use_container_width=True):
            st.session_state.autenticado = False
            st.session_state.usuario_atual = None
            st.rerun()
        
        st.markdown(f"**Data/Hora:** {datetime.now().strftime('%d/%m/%Y %H:%M')}")
    
    # Navega√ß√£o
    if 'pagina_atual' in st.session_state and st.session_state.pagina_atual == "alterar_senha":
        alterar_senha(db)
    elif menu == "üë• Clientes":
        modulo_clientes(db)
    elif menu == "üì¶ Produtos":
        modulo_produtos(db)
    elif menu == "üí∞ Vendas":
        modulo_vendas(db)
    elif menu == "üìä Relat√≥rios":
        modulo_relatorios(db)
    elif menu == "üë®‚Äçüíº Usu√°rios":
        modulo_usuarios(db)

if __name__ == "__main__":
    main()